===================
Usage: 1-my_list.py
===================

Definition of class ``MyList`` that inherits from ``list``.


Instantiation
=============

>>> MyList = __import__('1-my_list').MyList
>>> m = MyList()
>>> type(m)
<class '1-my_list.MyList'>

::

>>> issubclass(m.__class__, list)
True
>>> isinstance(m, list)
True

::

>>> print(m)
[]

::

>>> m = MyList([3, 4, 5])
>>> print(m)
[3, 4, 5]

::

>>> m = MyList(None)
Traceback (most recent call last):
TypeError: 'NoneType' object is not iterable

::

>>> m = MyList([2], [4])
Traceback (most recent call last):
TypeError: list expected at most 1 argument, got 2

Other use cases
===============


>>> m = MyList()
>>> m.append(10)
>>> m.append(20)
>>> print(m)
[10, 20]


::

>>> m[1] = 10
>>> print(m)
[10, 10]



``print_sorted`` Public Method
==============================

>>> m = MyList()
>>> print(m.print_sorted)
<bound method MyList.print_sorted of []>
>>> m.print_sorted(1)
Traceback (most recent call last):
TypeError: print_sorted() takes 1 positional argument but 2 were given

::

>>> m.append(1)
>>> m.append(-1)
>>> m.append(2)
>>> print(m)
[1, -1, 2]

::

>>> m.print_sorted()
[-1, 1, 2]

>>> print(m)
[1, -1, 2]

::

>>> m = MyList()
>>> m.append(1)
>>> m.append(2)
>>> m.append(4)
>>> m.print_sorted()
[1, 2, 4]
 
::

>>> m = MyList()
>>> m.append("zero")
>>> m.append("one")
>>> m.append("two")
>>> print(m)
['zero', 'one', 'two']
>>> m.print_sorted()
['one', 'two', 'zero']

::

>>> m = MyList()
>>> m.print_sorted()
[]

::

>>> m = MyList([100, "No", "True", -1])
>>> m.print_sorted()
Traceback (most recent call last):
TypeError: '<' not supported between instances of 'str' and 'int'

